AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Handler:
    Type: String

  Prefix:
    Type: String
    
  Runtime:
    Type: String
    

Resources:
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties: 
      ImageScanningConfiguration:
        ScanOnPush: true
      #LifecyclePolicy:
      #  LifecyclePolicyText: |
      #    {
      #      "rules": [
      #        {
      #          "rulePriority": 1,
      #          "description": "Keep only one untagged image, expire all others",
      #          "selection": {
      #            "tagStatus": "untagged",
      #            "countType": "imageCountMoreThan",
      #            "countNumber": 1
      #          },
      #          "action": {
      #            "type": "expire"
      #          }
      #        }
      #      ]
      #    }
      #  #  rules:
      #  #    - rulePriority: 1,
      #  #      description: Keep only one untagged image, expire all others
      #  #      selection:
      #  #        tagStatus: untagged
      #  #        countType: imageCountMoreThan
      #  #        countNumber: 1
      #  #      action:
      #  #        type: expire
      #  RegistryId: !Ref AWS::AccountId
      RepositoryName: !Ref Prefix
      
  CustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ECRFunction.Arn
      
  ECRFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          
          account_id = os.environ['ACCOUNT_ID']
          ecr_repository_name = os.environ['ECR_REPOSITORY_NAME']
          
          ecr_client = boto3.client('ecr')
           
          DELETE = 'Delete'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == DELETE:
                list_images_response = ecr_client.list_images(
                  registryId=account_id,
                  repositoryName=ecr_repository_name
                  )
                print(list_images_response)
                  
                image_ids = list_images_response['imageIds']
                
                if len(image_ids) == 0:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  return
                
                batch_delete_image_response = ecr_client.batch_delete_image(
                  registryId=account_id,
                  repositoryName=ecr_repository_name,
                  imageIds=image_ids
                  )
                print(batch_delete_image_response)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          #BUCKET_NAME: !Ref BucketName
          ECR_REPOSITORY_NAME: !Ref ECRRepository
      FunctionName: !Sub "${Prefix}-function-ecr"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt ECRFunctionRole.Arn

  ECRFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${Prefix}-ECRDeleteImagesPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  #- s3:ListBucket
                  #- s3:GetObject
                  #- s3:PutObject
                  #- s3:DeleteObject
                  - ecr:BatchDeleteImage
                  - ecr:ListImages
                Resource:
                  #- !Ref BucketArn
                  #- !Sub "${BucketArn}/*"
                  - !GetAtt ECRRepository.Arn
      
#Outputs:
#  ECRRepositoryName:
#    Value: !Ref ECRRepository
#    #Export:
#    #  Name: !Sub "${Prefix}-RepositoryName"
