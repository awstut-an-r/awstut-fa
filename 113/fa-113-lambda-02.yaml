AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Architecture:
    Type: String
    
  #BucketName:
  #  Type: String
    
  #EphemeralStorageSize:
  #  Type: Number

  Handler:
    Type: String
    
  #LayerBucket:
  #  Type: String
  #  
  #LayerPackage:
  #  Type: String
  #  
  #LayerS3Key:
  #  Type: String
  
  Prefix:
    Type: String
    
  #RequirementsParameter:
  #  Type: String
  #  
  #ResizeBucketName:
  #  Type: String
    
  Runtime:
    Type: String
    
  #SNSTopicArn:
  #  Type: String
    
  SQSMaxNumberOfMessages:
    Type: Number
    
  SQSQueueArn:
    Type: String
    
  SQSQueueName:
    Type: String
    
  #Timeout:
  #  Type: Number
    
  #UploadBucketName:
  #  Type: String


Resources:
  Function2:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref Architecture
      Code:
        ZipFile: |
          import boto3
          import os
          import pprint
          
          MAX_NUMBER_OF_MESSAGES = int(os.environ['MAX_NUMBER_OF_MESSAGES'])
          QUEUE_NAME = os.environ['QUEUE_NAME']
          REGION = os.environ['REGION']
          
          def lambda_handler(event, context):
            pprint.pprint(event)
            
            sqs = boto3.resource('sqs', region_name=REGION)
            queue = sqs.get_queue_by_name(QueueName=QUEUE_NAME)
            messages = queue.receive_messages(
              MaxNumberOfMessages=MAX_NUMBER_OF_MESSAGES)
              
            #bodies = [msg.body for msg in messages]
            #results = []
            for msg in messages:
              print(msg.body)
              #results.append(msg.body)
              #msg.delete()
      Environment:
        Variables:
          MAX_NUMBER_OF_MESSAGES: !Ref SQSMaxNumberOfMessages
          QUEUE_NAME: !Ref SQSQueueName
          REGION: !Ref AWS::Region
      FunctionName: !Sub "${Prefix}-Function2"
      Handler: !Ref Handler
      #Layers:
      #  - !Ref LambdaLayer
      Runtime: !Ref Runtime
      Role: !GetAtt Function2Role.Arn
      #Timeout: !Ref Timeout
      
  Function2Role:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSReceiveMessagePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                  #- sqs:DeleteMessage
                Resource:
                  - !Ref SQSQueueArn
      
  #S3Permission: 
  #  Type: AWS::Lambda::Permission
  #  Properties: 
  #    FunctionName: !Ref Function1
  #    Action: lambda:InvokeFunction
  #    Principal: s3.amazonaws.com
  #    SourceArn: !Sub "arn:aws:s3:::${BucketName}"
      
      
#Outputs:
#  Function1Arn:
#    Value: !GetAtt Function1.Arn