AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Architecture:
    Type: String

  EventBusName:
    Type: String

  Handler:
    Type: String
    
  Prefix:
    Type: String
    
  Runtime:
    Type: String
    
    
Resources:
  Function2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import datetime
          import json
          import os
          
          event_bus_name = os.environ['EVENT_BUS_NAME']
          detail_type = os.environ['DETAIL_TYPE']
          source = os.environ['SOURCE']
          
          client = boto3.client('events')
          
          def lambda_handler(event, context):
            #now = datetime.datetime.now()
            #unix_time = int(time.mktime(now.timetuple()))
          
            #detail = json.dumps(
            #  {
            #    'now': now.strftime('%Y-%m-%d %H:%M:%S.%f'),
            #    'unix_time': unix_time
            #  }
            #)
            detail = json.dumps({})
          
            entry = {
              'Time': datetime.datetime.now(),
              'Source': source,
              'Resources': [],
              'DetailType': detail_type,
              'Detail': detail,
              'EventBusName': event_bus_name
            }
            print(entry)
          
            response = client.put_events(
              Entries=[entry,]
            )
            print(response)
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref EventBusName
          DETAIL_TYPE: image-builder-finish-event
          SOURCE: !Ref Prefix
      FunctionName: !Sub "${Prefix}-function-02"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole2.Arn
      
  #Function2:
  #  Type: AWS::Lambda::Function
  #  Properties:
  #    Code:
  #      ZipFile: |
  #        def lambda_handler(event, context):
  #          print(event)
  #          
  #          unix_time = event['detail']['unix_time']
  #          
  #          if (unix_time % 2) == 0:
  #            print('{int} is even !'.format(int=unix_time))
  #          else:
  #            print('{int} is odd !'.format(int=unix_time))
  #    FunctionName: !Sub "${Prefix}-function-02"
  #    Handler: !Ref Handler
  #    Runtime: !Ref Runtime
  #    Role: !GetAtt FunctionRole.Arn

  FunctionRole2:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${Prefix}-PutEventsPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/${EventBusName}"
        
        
Outputs:
  Function2:
    Value: !Ref Function2

  FunctionArn2:
    Value: !GetAtt Function2.Arn