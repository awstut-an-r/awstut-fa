AWSTemplateFormatVersion: 2010-09-09

Parameters:
  TemplateBucketName:
    Type: String
    Default: [bucket-name]
    
  Prefix:
    Type: String
    Default: fa-085

  ImageId:
    Type: String
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
    
  InstanceType:
    Type: String
    Default: t4g.nano


Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-vpc.yaml"
      Parameters:
        AvailabilityZone: a
        CidrIp1: 10.0.1.0/24
        CidrIp2: 10.0.2.0/24
        Prefix: !Ref Prefix
        VPCCidrBlock: 10.0.0.0/16

  EC2Stack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - VPCStack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-ec2.yaml"
      Parameters:
        ImageId: !Ref ImageId
        InstanceSecurityGroup: !GetAtt VPCStack.Outputs.InstanceSecurityGroup
        InstanceSubnet: !GetAtt VPCStack.Outputs.InstanceSubnet
        InstanceType: !Ref InstanceType
        Prefix: !Ref Prefix
        UserData: !Base64 |
          #!/bin/bash -xe
          yum update -y
          amazon-linux-extras install docker
          systemctl start docker
          usermod -a -G docker ec2-user
        
  ECRStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - EC2Stack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-ecr.yaml"
      Parameters:
        InstanceRoleArn1: !GetAtt EC2Stack.Outputs.InstanceRoleArn1
        InstanceRoleArn2: !GetAtt EC2Stack.Outputs.InstanceRoleArn2
        Prefix: !Ref Prefix
