AWSTemplateFormatVersion: 2010-09-09

Parameters:
  TemplateBucketName:
    Type: String
    Default: awstut-bucket
    
  Prefix:
    Type: String
    Default: fa-086
    
  HTTPPort:
    Type: Number
    Default: 80
    
  HTTPSPort:
    Type: Number
    Default: 443
    
  LambdaArchitecture:
    Type: String
    Default: arm64
    
  LambdaHandler:
    Type: String
    Default: index.lambda_handler
    
  LambdaRuntime:
    Type: String
    Default: python3.8
    
  #RepositoryName:
  #  Type: String
  #  Default: public.ecr.aws/nginx/nginx
    
  ServiceCpu:
    Type: Number
    Default: 512
    
  ServiceMemory:
    Type: Number
    Default: 1024
    
  #ServiceScalingTargetValue:
  #  Type: Number
  #  Default: 0.01


Resources:
  LambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-lambda.yaml"
      Parameters:
        Architecture: !Ref LambdaArchitecture
        Handler: !Ref LambdaHandler
        Prefix: !Ref Prefix
        Runtime: !Ref LambdaRuntime

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-vpc.yaml"
      Parameters:
        AvailabilityZone1: a
        AvailabilityZone2: d
        CidrIp1: 10.0.1.0/24
        CidrIp2: 10.0.2.0/24
        CidrIp3: 10.0.3.0/24
        CidrIp4: 10.0.4.0/24
        HTTPPort: !Ref HTTPPort
        HTTPSPort: !Ref HTTPSPort
        Prefix: !Ref Prefix
        VPCCidrBlock: 10.0.0.0/16

  EndpointStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - VPCStack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-endpoint.yaml"
      Parameters:
        EndpointSecurityGroup: !GetAtt VPCStack.Outputs.EndpointSecurityGroup
        Prefix: !Ref Prefix
        PrivateRouteTable: !GetAtt VPCStack.Outputs.PrivateRouteTable
        PrivateSubnet1: !GetAtt VPCStack.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt VPCStack.Outputs.PrivateSubnet2
        VPC: !GetAtt VPCStack.Outputs.VPC
        
  ALBStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - VPCStack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-alb.yaml"
      Parameters:
        ALBSecurityGroup: !GetAtt VPCStack.Outputs.ALBSecurityGroup
        FunctionArn: !GetAtt LambdaStack.Outputs.FunctionArn
        #FunctionName: !GetAtt LambdaStack.Outputs.FunctionName
        HTTPPort: !Ref HTTPPort
        #Instance1: !GetAtt EC2Stack.Outputs.Instance1
        #Instance2: !GetAtt EC2Stack.Outputs.Instance2
        PublicSubnet1: !GetAtt VPCStack.Outputs.PublicSubnet1
        PublicSubnet2: !GetAtt VPCStack.Outputs.PublicSubnet2
        Prefix: !Ref Prefix
        VPC: !GetAtt VPCStack.Outputs.VPC
        HealthyThresholdCount: 5
        UnhealthyThresholdCount: 2
        HealthCheckTimeoutSeconds: 5
        HealthCheckIntervalSeconds: 30
        HttpCode: 200
        
  FargateStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - EndpointStack
      - ALBStack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-fargate.yaml"
      Parameters:
        ALBTargetGroupFargate: !GetAtt ALBStack.Outputs.ALBTargetGroupFargate
        ContainerSecurityGroup: !GetAtt VPCStack.Outputs.ContainerSecurityGroup
        #Cluster: !GetAtt FargateStack.Outputs.Cluster
        #FargateTaskExecutionRole: !GetAtt FargateStack.Outputs.FargateTaskExecutionRole
        HTTPPort: !Ref HTTPPort
        Prefix: !Ref Prefix
        PrivateSubnet1: !GetAtt VPCStack.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt VPCStack.Outputs.PrivateSubnet2
        #RepositoryName: !Ref RepositoryName
        Repository:
          Fn::ImportValue: !Sub "${Prefix}-Repository"
        ServiceCpu: !Ref ServiceCpu
        ServiceMemory: !Ref ServiceMemory
        #ServiceName: container1
        #ServiceScalingTargetValue: !Ref ServiceScalingTargetValue
        #ServiceSecurityGroup: !GetAtt VPCStack.Outputs.ServiceSecurityGroup
        
        
  #FargateStack:
  #  Type: AWS::CloudFormation::Stack
  #  #DependsOn:
  #  #  - EndpointStack
  #  #  - ECRStack
  #  Properties:
  #    TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-fargate.yaml"
  #    Parameters:
  #      Prefix: !Ref Prefix
  #      
  #FargateContainerStack:
  #  Type: AWS::CloudFormation::Stack
  #  DependsOn:
  #    - EndpointStack
  #    #- ECRStack
  #    - FargateStack
  #    - VPCStack
  #    - ALBStack
  #  Properties:
  #    TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-fargate-container.yaml"
  #    Parameters:
  #      ALBTargetGroup: !GetAtt ALBStack.Outputs.ALBTargetGroup
  #      Cluster: !GetAtt FargateStack.Outputs.Cluster
  #      FargateTaskExecutionRole: !GetAtt FargateStack.Outputs.FargateTaskExecutionRole
  #      HTTPPort: !Ref HTTPPort
  #      MyRepository:
  #        Fn::ImportValue: !Sub "${Prefix}-MyRepository"
  #      Prefix: !Ref Prefix
  #      PrivateSubnet1: !GetAtt VPCStack.Outputs.PrivateSubnet1
  #      PrivateSubnet2: !GetAtt VPCStack.Outputs.PrivateSubnet2
  #      ServiceCpu: !Ref ServiceCpu
  #      ServiceMemory: !Ref ServiceMemory
  #      ServiceName: container1
  #      ServiceScalingTargetValue: !Ref ServiceScalingTargetValue
  #      ServiceSecurityGroup: !GetAtt VPCStack.Outputs.ServiceSecurityGroup
        
  #FargateService2Stack:
  #  Type: AWS::CloudFormation::Stack
  #  DependsOn:
  #    #- EndpointStack
  #    #- ECRStack
  #    - FargateStack
  #    - VPCStack
  #  Properties:
  #    TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-fargate-service2.yaml"
  #    Parameters:
  #      Cluster: !GetAtt FargateStack.Outputs.Cluster
  #      FargateTaskExecutionRole: !GetAtt FargateStack.Outputs.FargateTaskExecutionRole
  #      #MyServiceRepository: !GetAtt ECRStack.Outputs.MyServiceRepository
  #      MyServiceRepository:
  #        Fn::ImportValue: !Sub "${Prefix}-MyServiceRepository"
  #      Prefix: !Ref Prefix
  #      ServiceCpu: !Ref ServiceCpu
  #      ServiceMemory: !Ref ServiceMemory
  #      ServiceName: service2
  #      ServiceSecurityGroup: !GetAtt VPCStack.Outputs.ServiceSecurityGroup
  #      #PrivateSubnet1: !GetAtt VPCStack.Outputs.PrivateSubnet1
  #      #PublicSubnet1: !GetAtt VPCStack.Outputs.PublicSubnet1
  #      PublicSubnet2: !GetAtt VPCStack.Outputs.PublicSubnet2
  
