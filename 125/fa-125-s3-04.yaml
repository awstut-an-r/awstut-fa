AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Architecture:
    Type: String

  Handler:
    Type: String
    
  PasswordLength:
    Type: Number
  
  Prefix:
    Type: String
    
  Runtime:
    Type: String
    
  TestObjectKey:
    Type: String
    

Resources:
  Bucket4:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${Prefix}-sse-c"
      #BucketEncryption:
      #  ServerSideEncryptionConfiguration:
      #    - BucketKeyEnabled: false
      #      ServerSideEncryptionByDefault: 
      #        KMSMasterKeyID: !Ref Key
      #        SSEAlgorithm: aws:kms
      
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket4
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:PutObject
            Effect: Deny
            Principal: "*"
            Resource:
              - !Sub "arn:aws:s3:::${Bucket4}/*"
            Condition:
              "Null":
                s3:x-amz-server-side-encryption-customer-algorithm: true
                
  Secret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Secret for S3 SSE-C.
      GenerateSecretString: 
        ExcludeCharacters: ""
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: true
        ExcludeUppercase: true
        #GenerateStringKey: !Ref PasswordKey
        IncludeSpace: false
        PasswordLength: !Ref PasswordLength
        RequireEachIncludedType: true
        #SecretStringTemplate: !Sub '{"${PasswordKey}": "hogehoge"}'
      KmsKeyId: alias/aws/secretsmanager
      Name: !Ref Prefix
      #ReplicaRegions: 
      #  - ReplicaRegion
      #SecretString: 
      #  String
      #Tags: 
      #  - Tag
      
  Function1:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref Architecture
      Environment:
        Variables:
          BUCKET_NAME: !Ref Bucket4
          OBJECT_KEY: !Ref TestObjectKey
          SECRET_ARN: !Ref Secret
      Code:
        ZipFile: |
          import base64
          import boto3
          import hashlib
          import os
          
          bucket_name = os.environ['BUCKET_NAME']
          object_key = os.environ['OBJECT_KEY']
          secret_arn = os.environ['SECRET_ARN']
          
          secretmanager_client = boto3.client('secretsmanager')
          s3_client = boto3.client('s3')
          
          object_body = 'awstut!'
          char_code = 'utf-8'
          content_type = 'text/plain'
          
          def lambda_handler(event, context):
            response = secretmanager_client.get_secret_value(
              SecretId=secret_arn
            )
            #print(response)
            key = response['SecretString']
            #print(key)
            
            key_base64 = base64.b64encode(key.encode()).decode()
            #print(key_base64)
            
            key_hash = hashlib.md5(key.encode()).digest()
            #print(key_hash)
            key_hash_base64 = base64.b64encode(key_hash).decode()
            #print(key_hash_base64)
            
            response = s3_client.put_object(
              Bucket=bucket_name,
              Key=object_key,
              Body=object_body.encode(char_code),
              ContentEncoding=char_code,
              ContentType=content_type,
              SSECustomerAlgorithm='AES256',
              SSECustomerKey=key_base64,
              SSECustomerKeyMD5=key_hash_base64
            )
            return response
      FunctionName: !Sub "${Prefix}-function1"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      
  Function2:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref Architecture
      Environment:
        Variables:
          BUCKET_NAME: !Ref Bucket4
          OBJECT_KEY: !Ref TestObjectKey
          SECRET_ARN: !Ref Secret
      Code:
        ZipFile: |
          import base64
          import boto3
          import hashlib
          import os
          
          bucket_name = os.environ['BUCKET_NAME']
          object_key = os.environ['OBJECT_KEY']
          secret_arn = os.environ['SECRET_ARN']
          
          secretmanager_client = boto3.client('secretsmanager')
          s3_client = boto3.client('s3')
          
          #object_body = 'awstut!'
          char_code = 'utf-8'
          #content_type = 'text/plain'
          
          def lambda_handler(event, context):
            response = secretmanager_client.get_secret_value(
              SecretId=secret_arn
            )
            #print(response)
            key = response['SecretString']
            #print(key)
            
            key_base64 = base64.b64encode(key.encode()).decode()
            #print(key_base64)
            
            key_hash = hashlib.md5(key.encode()).digest()
            #print(key_hash)
            key_hash_base64 = base64.b64encode(key_hash).decode()
            #print(key_hash_base64)
            
            response = s3_client.get_object(
              Bucket=bucket_name,
              Key=object_key,
              #Body=object_body.encode(char_code),
              #ContentEncoding=char_code,
              #ContentType=content_type,
              SSECustomerAlgorithm='AES256',
              SSECustomerKey=key_base64,
              SSECustomerKeyMD5=key_hash_base64
            )
            body = response['Body'].read()
            #print(body)
            #print(body.decode(char_code))
            
            return body.decode(char_code)
      FunctionName: !Sub "${Prefix}-function2"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      
  FunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref Secret
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  #- s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${Bucket4}"
                  - !Sub "arn:aws:s3:::${Bucket4}/*"