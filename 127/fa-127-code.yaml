AWSTemplateFormatVersion: 2010-09-09

Parameters:
  #BranchName:
  #  Type: String
    
  #BucketArn:
  #  Type: String

  #BucketName:
  #  Type: String
    
  ECRRepositoryName:
    Type: String
    
  #PipelineBuildArtifact:
  #  Type: String
  
  #PipelineSourceArtifact:
  #  Type: String
    
  Prefix:
    Type: String
    
  ProjectEnvironmentComputeType:
    Type: String
    
  ProjectEnvironmentImage:
    Type: String
    
  ProjectEnvironmentType:
    Type: String
    
  Secret:
    Type: String
    
  #SecretArn:
  #  Type: String
  #  
  #SecretId:
  #  Type: String
    
  #SSMParameterDockerHubPassword:
  #  Type: String
  #  
  #SSMParameterDockerHubUsername:
  #  Type: String
    

Resources:
  #Pipeline:
  #  Type: AWS::CodePipeline::Pipeline
  #  #DependsOn:
  #  #  - CodeCommitRepository
  #  Properties:
  #    ArtifactStore:
  #      #EncryptionKey:
  #      Location: !Ref BucketName
  #      Type: S3
  #    #ArtifactStores:
  #    #DisableInboundStageTransitions:
  #    Name: !Ref Prefix
  #    #RestartExecutionOnUpdate
  #    RoleArn: !GetAtt CodePipelineRole.Arn
  #    Stages:
  #      - Actions:
  #          - ActionTypeId: 
  #              Category: Source
  #              Owner: AWS
  #              Provider: CodeCommit
  #              Version: 1
  #            Configuration:
  #              BranchName: !Ref BranchName
  #              OutputArtifactFormat: CODE_ZIP
  #              PollForSourceChanges: false
  #              RepositoryName: !GetAtt CodeCommitRepository.Name
  #            #InputArtifacts:
  #            Name: SourceAction
  #            #Namespace:
  #            OutputArtifacts:
  #              - Name: !Ref PipelineSourceArtifact
  #            Region: !Ref AWS::Region
  #            #RoleArn:
  #            RunOrder: 1
  #        Name: Source
  #      - Actions:
  #          - ActionTypeId:
  #              Category: Build
  #              Owner: AWS
  #              Provider: CodeBuild
  #              Version: 1
  #            Configuration:
  #              ProjectName: !Ref CodeBuildProject
  #            InputArtifacts:
  #              - Name: !Ref PipelineSourceArtifact
  #            Name: Build
  #            #Namespace:
  #            OutputArtifacts:
  #              - Name: !Ref PipelineBuildArtifact
  #            Region: !Ref AWS::Region
  #            #RoleArn:
  #            RunOrder: 1
  #        Name: Build
          
  #CodePipelineRole:
  #  Type: AWS::IAM::Role
  #  Properties:
  #    AssumeRolePolicyDocument:
  #      Version: 2012-10-17
  #      Statement:
  #        - Effect: Allow
  #          Principal:
  #            Service:
  #              - codepipeline.amazonaws.com
  #          Action:
  #            - sts:AssumeRole
  #    #ManagedPolicyArns:
  #    #  - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  #    Policies:
  #      - PolicyName: PipelinePolicy
  #        PolicyDocument:
  #          Version: 2012-10-17
  #          Statement:
  #            - Effect: Allow
  #              Action:
  #                - codecommit:CancelUploadArchive
  #                - codecommit:GetBranch
  #                - codecommit:GetCommit
  #                - codecommit:GetRepository
  #                - codecommit:GetUploadArchiveStatus
  #                - codecommit:UploadArchive
  #              Resource:
  #                - !GetAtt CodeCommitRepository.Arn
  #            - Effect: Allow
  #              Action:
  #                - codebuild:BatchGetBuilds
  #                - codebuild:StartBuild
  #                - codebuild:BatchGetBuildBatches
  #                - codebuild:StartBuildBatch
  #              Resource:
  #                - !GetAtt CodeBuildProject.Arn
  #            - Effect: Allow
  #              Action:
  #                - s3:PutObject
  #                - s3:GetObject
  #                - s3:GetObjectVersion
  #                - s3:GetBucketAcl
  #                - s3:GetBucketLocation
  #              Resource:
  #                - !Sub "arn:aws:s3:::${BucketName}"
  #                - !Sub "arn:aws:s3:::${BucketName}/*"
  #                
  #CodeCommitRepository:
  #  Type: AWS::CodeCommit::Repository
  #  Properties: 
  #    #Code:
  #    #RepositoryDescription:
  #    RepositoryName: !Ref Prefix
  #    #Triggers:
  #    
  #EventsRule:
  #  Type: AWS::Events::Rule
  #  #DependsOn:
  #  #  - Pipeline
  #  Properties: 
  #    EventPattern:
  #      source:
  #        - aws.codecommit
  #      detail-type:
  #        - CodeCommit Repository State Change
  #      resources:
  #        - !GetAtt CodeCommitRepository.Arn
  #      detail:
  #        event:
  #          - referenceCreated
  #          - referenceUpdated
  #        referenceType:
  #          - branch
  #        referenceName:
  #          - !Ref BranchName
  #    Name: !Ref Prefix
  #    Targets:
  #      - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}"
  #        Id: !Sub "${Prefix}-CodePipeline-CodeCommit"
  #        RoleArn: !GetAtt EventsRuleRole.Arn
  #        
  #EventsRuleRole:
  #  Type: AWS::IAM::Role
  #  Properties:
  #    AssumeRolePolicyDocument:
  #      Version: 2012-10-17
  #      Statement:
  #        - Effect: Allow
  #          Principal:
  #            Service:
  #              - events.amazonaws.com
  #          Action:
  #            - sts:AssumeRole
  #    #ManagedPolicyArns:
  #    #  - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  #    Policies:
  #      - PolicyName: PipelineExecutionPolicy
  #        PolicyDocument:
  #          Version: 2012-10-17
  #          Statement:
  #            - Effect: Allow
  #              Action:
  #                - codepipeline:StartPipelineExecution
  #              Resource:
  #                - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}"
  
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts:
        #ArtifactIdentifier: String
        #EncryptionDisabled: Boolean
        #Location: String
        #Name: String
        #NamespaceType: String
        #OverrideArtifactName: Boolean
        #Packaging: String
        #Path: String
        #Type: CODEPIPELINE
        Type: NO_ARTIFACTS
      #BadgeEnabled: Boolean
      #BuildBatchConfig: 
      #  BatchReportMode: String
      #  CombineArtifacts: Boolean
      #  Restrictions: 
      #    BatchRestrictions
      #  ServiceRole: String
      #  TimeoutInMins: Integer
      Cache: 
        Type: NO_CACHE
      #ConcurrentBuildLimit: Integer
      #Description: String
      #EncryptionKey: String
      Environment: 
        ComputeType: !Ref ProjectEnvironmentComputeType
        EnvironmentVariables:
          - Name: DOCKERHUB_PASSWORD
            Type: SECRETS_MANAGER
            Value: !Sub "${Secret}:password"
          - Name: DOCKERHUB_USERNAME
            Type: SECRETS_MANAGER
            Value: !Sub "${Secret}:username"
        Image: !Ref ProjectEnvironmentImage
        ImagePullCredentialsType: CODEBUILD
        Type: !Ref ProjectEnvironmentType
        PrivilegedMode: true
      #FileSystemLocations: 
      #  - ProjectFileSystemLocation
      LogsConfig: 
        CloudWatchLogs:
          Status: DISABLED
        S3Logs:
          Status: DISABLED
      Name: !Ref Prefix
      #QueuedTimeoutInMinutes: 480
      #ResourceAccessRole: String
      #SecondaryArtifacts: 
      #  - Artifacts
      #SecondarySources: 
      #  - Source
      #SecondarySourceVersions: 
      #  - ProjectSourceVersion
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source: 
        #Type: CODEPIPELINE
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws --version
                - aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
                - REPOSITORY_URI=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=${!COMMIT_HASH:=latest}
                - echo Logging in to Docker Hub...
                - echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
                - |
                  cat << EOF > Dockerfile
                  FROM amazonlinux:latest
                  EXPOSE 80
                  EOF
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $REPOSITORY_URI:latest .
                - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker images...
                - docker push $REPOSITORY_URI:latest
                - docker push $REPOSITORY_URI:$IMAGE_TAG
        #        - echo Writing image definitions file...
        #        - printf '[{"name":"hello-world","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
        #  artifacts:
        #      files: imagedefinitions.json
      #SourceVersion: String
      #Tags: 
      #  - Tag
      #TimeoutInMinutes: 60
      #Triggers: 
      #  ProjectTriggers
      Visibility: PRIVATE
      #VpcConfig: 
      #  VpcConfig
        
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        - PolicyName: GetSecretValuePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref Secret
              #- Effect: Allow
              #  Action:
              #    - ssm:GetParameters
              #  Resource:
              #    - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SSMParameterDockerHubPassword}"
              #    - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SSMParameterDockerHubUsername}"
              #- Effect: Allow
              #  Action:
              #    - s3:PutObject
              #    - s3:GetObject
              #    - s3:GetObjectVersion
              #    - s3:GetBucketAcl
              #    - s3:GetBucketLocation
              #  Resource:
              #    #- !Ref BucketArn
              #    #- !Sub "${BucketArn}/*"
              #    - !Sub "arn:aws:s3:::${BucketName}"
              #    - !Sub "arn:aws:s3:::${BucketName}/*"
              #- Effect: Allow
              #  Action:
              #    - codebuild:CreateReportGroup
              #    - codebuild:CreateReport
              #    - codebuild:UpdateReport
              #    - codebuild:BatchPutTestCases
              #    - codebuild:BatchPutCodeCoverages
              #  Resource:
              #    - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*"
              
              
Outputs:
  CodeBuildProject:
    Value: !Ref CodeBuildProject