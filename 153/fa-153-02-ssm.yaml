AWSTemplateFormatVersion: 2010-09-09

Parameters:
  #AppDir:
  #  Type: String

  BucketName:
    Type: String

  #CertificateDir:
  #  Type: String
    
  CertificateName:
    Type: String
    
  Endpoint:
    Type: String
    
  InstanceId:
    Type: String
    
  Prefix:
    Type: String
    
  PrivateKeyName:
    Type: String
    
  PublicKeyName:
    Type: String
    
  PublishTopicName:
    Type: String
    
  SubscribeTopicName:
    Type: String
    
  Thing:
    Type: String
    
  UserName:
    Type: String
    
  WaitForSuccessTimeoutSeconds:
    Type: Number
    
    
Resources:
  #RunShellScriptAssociation:
  #  Type: AWS::SSM::Association
  #  Properties:
  #    AssociationName: !Sub "${Prefix}-shellscript-association"
  #    Name: AWS-RunShellScript
  #    OutputLocation:
  #      S3Location:
  #        #OutputS3BucketName: !Ref LogBucketName
  #        OutputS3BucketName: !Ref BucketName
  #        #OutputS3KeyPrefix: !Sub "${Prefix}/shellscript-association-log"
  #        OutputS3KeyPrefix: shellscript-association-log
  #    #ParameterValues:
  #    Parameters:
  #      commands:
  #        - "export HOME=/root"
  #        - "apt-get -y install build-essential libssl-dev cmake unzip git python3-pip"
  #        - "export PATH=$PATH:~/.local/bin"
  #        #- "export PATH=$PATH:/root/.local/bin"
  #        #- !Sub "export PATH=$PATH:/home/${UserName}/.local/bin"
  #        - "git clone https://github.com/aws/aws-cli.git"
  #        - "cd aws-cli && git checkout v2"
  #        - "pip3 install --break-system-packages -r requirements.txt"
  #        - "pip3 install --break-system-packages ."
  #      
  #        #- "mkdir ~/${CertificateDir}"
  #        - "mkdir ~/certs"
  #        #- !Sub "mkdir /home/${UserName}/certs"
  #        #- !Sub "curl -o ~/certs/${RootCertificateName} https://www.amazontrust.com/repository/AmazonRootCA1.pem"
  #        -  "curl -o ~/certs/AmazonRootCA1.pem https://www.amazontrust.com/repository/AmazonRootCA1.pem"
  #        #- !Sub "curl -o /home/${UserName}/certs/AmazonRootCA1.pem https://www.amazontrust.com/repository/AmazonRootCA1.pem"
  #        - "chmod 745 ~"
  #        #- !Sub "chmod 745 /home/${UserName}"
  #        #- !Sub "chmod 700 ~/${CertificateDir}"
  #        - "chmod 700 ~/certs"
  #        #- !Sub "chmod 700 /home/${UserName}/certs"
  #        #- !Sub "chmod 644 ~/${CertificateDir}/${RootCertificateName}"
  #        #- !Sub "chmod 644 ~/certs/${RootCertificateName}"
  #        - "chmod 644 ~/certs/AmazonRootCA1.pem"
  #        #- !Sub "chmod 644 /home/${UserName}/certs/AmazonRootCA1.pem"
  #        
  #        - "cd ~"
  #        #- !Sub "cd /home/${UserName}"
  #        - "git clone https://github.com/awslabs/aws-iot-device-client aws-iot-device-client"
  #        - "mkdir ~/aws-iot-device-client/build && cd ~/aws-iot-device-client/build"
  #        #- !Sub "mkdir /home/${UserName}/aws-iot-device-client/build && cd /home/${UserName}/aws-iot-device-client/build"
  #        - "cmake ../"
  #        - "cmake --build . --target aws-iot-device-client"
  #        
  #        - "mkdir ~/dc-configs"
  #        #- !Sub "mkdir /home/${UserName}/dc-configs"
  #        - "mkdir ~/policies"
  #        #- !Sub "mkdir /home/${UserName}/policies"
  #        - "mkdir ~/messages"
  #        #- !Sub "mkdir /home/${UserName}/messages"
  #        - "mkdir ~/certs/testconn"
  #        #- !Sub "mkdir /home/${UserName}/certs/testconn"
  #        - "mkdir ~/certs/pubsub"
  #        #- !Sub "mkdir /home/${UserName}/certs/pubsub"
  #        - "mkdir ~/certs/jobs"
  #        #- !Sub "mkdir /home/${UserName}/certs/jobs"
  #        - "chmod 745 ~"
  #        #- !Sub "chmod 745 /home/${UserName}"
  #        - "chmod 700 ~/certs/testconn"
  #        #- !Sub "chmod 700 /home/${UserName}/certs/testconn"
  #        - "chmod 700 ~/certs/pubsub"
  #        #- !Sub "chmod 700 /home/${UserName}/certs/pubsub"
  #        - "chmod 700 ~/certs/jobs"
  #        #- !Sub "chmod 700 /home/${UserName}/certs/jobs"
  #        
  #        #- !Sub "aws s3 cp s3://${BucketName}/${Thing}/${CertificateName} ~/${CertificateDir}/${AppDir}/"
  #        #- !Sub "aws s3 cp s3://${BucketName}/${Thing}/${PrivateKeyName} ~/${CertificateDir}/${AppDir}/"
  #        #- !Sub "aws s3 cp s3://${BucketName}/${Thing}/${PublicKeyName} ~/${CertificateDir}/${AppDir}/"
  #        - !Sub "aws s3 cp s3://${BucketName}/${Thing}/${CertificateName} ~/certs/testconn/"
  #        #- !Sub "aws s3 cp s3://${BucketName}/${Thing}/${CertificateName} /home/${UserName}/certs/testconn/"
  #        - !Sub "aws s3 cp s3://${BucketName}/${Thing}/${PrivateKeyName} ~/certs/testconn/"
  #        #- !Sub "aws s3 cp s3://${BucketName}/${Thing}/${PrivateKeyName} /home/${UserName}/certs/testconn/"
  #        - !Sub "aws s3 cp s3://${BucketName}/${Thing}/${PublicKeyName} ~/certs/testconn"
  #        #- !Sub "aws s3 cp s3://${BucketName}/${Thing}/${PublicKeyName} /home/${UserName}/certs/testconn"
  #        
  #        - "chmod 644 ~/certs/testconn/*"
  #        #- !Sub "chmod 644 /home/${UserName}/certs/testconn/*"
  #        - !Sub "chmod 600 ~/certs/testconn/${PrivateKeyName}"
  #        #- !Sub "chmod 600 /home/${UserName}/certs/testconn/${PrivateKeyName}"
  #        
  #        - "chmod 745 ~/dc-configs"
  #        #- !Sub "chmod 745 /home/${UserName}/dc-configs"
  #        #- "cat ~/dc-configs/dc-testconn-config.json"
  #        - !Sub |
  #          cat << EOF > ~/dc-configs/dc-testconn-config.json
  #          {
  #            "endpoint": "${Endpoint}",
  #            "cert": "~/certs/testconn/${CertificateName}",
  #            "key": "~/certs/testconn/${PrivateKeyName}",
  #            "root-ca": "~/certs/AmazonRootCA1.pem",
  #            "thing-name": "${Thing}",
  #            "logging": {
  #              "enable-sdk-logging": true,
  #              "level": "DEBUG",
  #              "type": "STDOUT",
  #              "file": ""
  #            },
  #            "jobs": {
  #              "enabled": false,
  #              "handler-directory": ""
  #            },
  #            "tunneling": {
  #              "enabled": false
  #            },
  #            "device-defender": {
  #              "enabled": false,
  #              "interval": 300
  #            },
  #            "fleet-provisioning": {
  #              "enabled": false,
  #              "template-name": "",
  #              "template-parameters": "",
  #              "csr-file": "",
  #              "device-key": ""
  #            },
  #            "samples": {
  #              "pub-sub": {
  #                "enabled": true,
  #                "publish-topic": "${PublishTopicName}",
  #                "publish-file": "",
  #                "subscribe-topic": "${SubscribeTopicName}",
  #                "subscribe-file": ""
  #              }
  #            },
  #            "config-shadow": {
  #              "enabled": false
  #            },
  #            "sample-shadow": {
  #              "enabled": false,
  #              "shadow-name": "",
  #              "shadow-input-file": "",
  #              "shadow-output-file": ""
  #            }
  #          }
  #          EOF
  #        - "chmod 644 ~/dc-configs/dc-testconn-config.json"
  #        #- !Sub "chmod 644 /home/${UserName}/dc-configs/dc-testconn-config.json"
  #        
  #        - "cd ~/aws-iot-device-client/build"
  #        #- !Sub "cd /home/${UserName}/aws-iot-device-client/build"
  #        - "./aws-iot-device-client --config-file ~/dc-configs/dc-testconn-config.json"
  #        #- !Sub "./aws-iot-device-client --config-file /home/${UserName}/dc-configs/dc-testconn-config.json"
  #    Targets:
  #      - Key: InstanceIds
  #        Values:
  #          - !Ref InstanceId
  #    WaitForSuccessTimeoutSeconds: !Ref WaitForSuccessTimeoutSeconds
      
  #RunShellScriptAssociation2:
  #  Type: AWS::SSM::Association
  #  Properties:
  #    AssociationName: !Sub "${Prefix}-shellscript-association-02"
  #    Name: AWS-RunShellScript
  #    OutputLocation:
  #      S3Location:
  #        #OutputS3BucketName: !Ref LogBucketName
  #        OutputS3BucketName: !Ref BucketName
  #        #OutputS3KeyPrefix: !Sub "${Prefix}/shellscript-association-log"
  #        OutputS3KeyPrefix: shellscript-association-log-02
  #    #ParameterValues:
  #    Parameters:
  #      commands:
  #        #- "export HOME=/root"
  #        - "whoami"
  #        - !Sub 'su - ${UserName} -c "whoami"'
  #        - !Sub 'su - ${UserName} -c "env"'
  #        - !Sub 'su - ${UserName} -c "mkdir ~/hogehoge"'
  #    Targets:
  #      - Key: InstanceIds
  #        Values:
  #          - !Ref InstanceId
  #    WaitForSuccessTimeoutSeconds: !Ref WaitForSuccessTimeoutSeconds
  
  RunShellScriptAssociation:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: !Sub "${Prefix}-shellscript-association"
      Name: AWS-RunShellScript
      OutputLocation:
        S3Location:
          #OutputS3BucketName: !Ref LogBucketName
          OutputS3BucketName: !Ref BucketName
          #OutputS3KeyPrefix: !Sub "${Prefix}/shellscript-association-log"
          OutputS3KeyPrefix: shellscript-association-log
      #ParameterValues:
      Parameters:
        commands:
          #- "export HOME=/root"
          - "apt-get -y install build-essential libssl-dev cmake unzip git python3-pip"
          #- "export PATH=$PATH:~/.local/bin"
          - !Sub 'su - ${UserName} -c "export PATH=$PATH:~/.local/bin"'
          #- "git clone https://github.com/aws/aws-cli.git"
          - !Sub 'su - ${UserName} -c "git clone https://github.com/aws/aws-cli.git"'
          #- "cd aws-cli && git checkout v2"
          #- !Sub 'su - ${UserName} -c "cd aws-cli && git checkout v2"'
          #- "pip3 install --break-system-packages -r requirements.txt"
          - !Sub 'su - ${UserName} -c "cd aws-cli && git checkout v2 && sudo pip3 install --break-system-packages -r requirements.txt"'
          #- "pip3 install --break-system-packages ."
          - !Sub 'su - ${UserName} -c "cd aws-cli && git checkout v2 && sudo pip3 install --break-system-packages ."'
        
          #- "mkdir ~/certs"
          - !Sub 'su - ${UserName} -c "mkdir ~/certs"'
          #-  "curl -o ~/certs/AmazonRootCA1.pem https://www.amazontrust.com/repository/AmazonRootCA1.pem"
          - !Sub 'su - ${UserName} -c "curl -o ~/certs/AmazonRootCA1.pem https://www.amazontrust.com/repository/AmazonRootCA1.pem"'
          #- "chmod 745 ~"
          - !Sub 'su - ${UserName} -c "chmod 745 ~"'
          #- "chmod 700 ~/certs"
          - !Sub 'su - ${UserName} -c "chmod 700 ~/certs"'
          #- "chmod 644 ~/certs/AmazonRootCA1.pem"
          - !Sub 'su - ${UserName} -c "chmod 644 ~/certs/AmazonRootCA1.pem"'
          
          #- "cd ~"
          #- !Sub 'su - ${UserName} -c "cd ~"'
          #- "git clone https://github.com/awslabs/aws-iot-device-client aws-iot-device-client"
          - !Sub 'su - ${UserName} -c "git clone https://github.com/awslabs/aws-iot-device-client aws-iot-device-client"'
          #- "mkdir ~/aws-iot-device-client/build && cd ~/aws-iot-device-client/build"
          #- !Sub 'su - ${UserName} -c "mkdir ~/aws-iot-device-client/build && cd ~/aws-iot-device-client/build"'
          - !Sub 'su - ${UserName} -c "mkdir ~/aws-iot-device-client/build"'
          #- "cmake ../"
          - !Sub 'su - ${UserName} -c "cd ~/aws-iot-device-client/build && cmake ../"'
          #- "cmake --build . --target aws-iot-device-client"
          - !Sub 'su - ${UserName} -c "cd ~/aws-iot-device-client/build && cmake --build . --target aws-iot-device-client"'
          
          #- "mkdir ~/dc-configs"
          - !Sub 'su - ${UserName} -c "mkdir ~/dc-configs"'
          #- "mkdir ~/policies"
          - !Sub 'su - ${UserName} -c "mkdir ~/policies"'
          #- "mkdir ~/messages"
          - !Sub 'su - ${UserName} -c "mkdir ~/messages"'
          #- "mkdir ~/certs/testconn"
          - !Sub 'su - ${UserName} -c "mkdir ~/certs/testconn"'
          #- "mkdir ~/certs/pubsub"
          - !Sub 'su - ${UserName} -c "mkdir ~/certs/pubsub"'
          #- "mkdir ~/certs/jobs"
          - !Sub 'su - ${UserName} -c "mkdir ~/certs/jobs"'
          #- "chmod 745 ~"
          - !Sub 'su - ${UserName} -c "chmod 745 ~"'
          #- "chmod 700 ~/certs/testconn"
          - !Sub 'su - ${UserName} -c "chmod 700 ~/certs/testconn"'
          #- "chmod 700 ~/certs/pubsub"
          - !Sub 'su - ${UserName} -c "chmod 700 ~/certs/pubsub"'
          #- "chmod 700 ~/certs/jobs"
          - !Sub 'su - ${UserName} -c "chmod 700 ~/certs/jobs"'
          
          #- !Sub "aws s3 cp s3://${BucketName}/${Thing}/${CertificateName} ~/certs/testconn/"
          - !Sub 'su - ${UserName} -c "sudo aws s3 cp s3://${BucketName}/${Thing}/${CertificateName} ~/certs/testconn/"'
          #- !Sub "aws s3 cp s3://${BucketName}/${Thing}/${PrivateKeyName} ~/certs/testconn/"
          - !Sub 'su - ${UserName} -c "sudo aws s3 cp s3://${BucketName}/${Thing}/${PrivateKeyName} ~/certs/testconn/"'
          #- !Sub "aws s3 cp s3://${BucketName}/${Thing}/${PublicKeyName} ~/certs/testconn"
          - !Sub 'su - ${UserName} -c "sudo aws s3 cp s3://${BucketName}/${Thing}/${PublicKeyName} ~/certs/testconn"'
          
          - !Sub 'su - ${UserName} -c "sudo chown ${UserName}:${UserName} ~/certs/testconn/*"'
          
          #- "chmod 644 ~/certs/testconn/*"
          - !Sub 'su - ${UserName} -c "sudo chmod 644 ~/certs/testconn/*"'
          #- !Sub "chmod 600 ~/certs/testconn/${PrivateKeyName}"
          - !Sub 'su - ${UserName} -c "sudo chmod 600 ~/certs/testconn/${PrivateKeyName}"'
          
          #- "chmod 745 ~/dc-configs"
          - !Sub 'su - ${UserName} -c "chmod 745 ~/dc-configs"'
          #- !Sub "chmod 745 /home/${UserName}/dc-configs"
          #- "cat ~/dc-configs/dc-testconn-config.json"
          - !Sub |
            cat << EOF > /home/${UserName}/dc-configs/dc-testconn-config.json
            {
              "endpoint": "${Endpoint}",
              "cert": "~/certs/testconn/${CertificateName}",
              "key": "~/certs/testconn/${PrivateKeyName}",
              "root-ca": "~/certs/AmazonRootCA1.pem",
              "thing-name": "${Thing}",
              "logging": {
                "enable-sdk-logging": true,
                "level": "DEBUG",
                "type": "STDOUT",
                "file": ""
              },
              "jobs": {
                "enabled": false,
                "handler-directory": ""
              },
              "tunneling": {
                "enabled": false
              },
              "device-defender": {
                "enabled": false,
                "interval": 300
              },
              "fleet-provisioning": {
                "enabled": false,
                "template-name": "",
                "template-parameters": "",
                "csr-file": "",
                "device-key": ""
              },
              "samples": {
                "pub-sub": {
                  "enabled": true,
                  "publish-topic": "${PublishTopicName}",
                  "publish-file": "",
                  "subscribe-topic": "${SubscribeTopicName}",
                  "subscribe-file": ""
                }
              },
              "config-shadow": {
                "enabled": false
              },
              "sample-shadow": {
                "enabled": false,
                "shadow-name": "",
                "shadow-input-file": "",
                "shadow-output-file": ""
              }
            }
            EOF
          #- !Sub "chown ${UserName}:${UserName} ~/dc-configs/dc-testconn-config.json"
          - !Sub 'su - ${UserName} -c "sudo chown ${UserName}:${UserName} ~/dc-configs/dc-testconn-config.json"'
          #- "chmod 644 ~/dc-configs/dc-testconn-config.json"
          - !Sub 'su - ${UserName} -c "chmod 644 ~/dc-configs/dc-testconn-config.json"'
          
          - !Sub 'su - ${UserName} -c "sudo mkdir /var/log/aws-iot-device-client"'
          - !Sub 'su - ${UserName} -c "sudo chmod 745 /var/log/aws-iot-device-client"'
          - !Sub 'su - ${UserName} -c "sudo chown ${UserName}:${UserName} /var/log/aws-iot-device-client"'
          
          ##- "cd ~/aws-iot-device-client/build"
          #- !Sub 'su - ${UserName} -c "cd ~/aws-iot-device-client/build"'
          ##- "./aws-iot-device-client --config-file ~/dc-configs/dc-testconn-config.json"
          #- !Sub 'su - ${UserName} -c "./aws-iot-device-client --config-file ~/dc-configs/dc-testconn-config.json"'
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref InstanceId
      WaitForSuccessTimeoutSeconds: !Ref WaitForSuccessTimeoutSeconds