AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Architecture:
    Type: String

  #CodeS3Bucket:
  #  Type: String
    
  #CodeS3Key:
  #  Type: String
    
  #DBTableName:
  #  Type: String
  
  DBIamUsername:
    Type: String
  
  DBInstanceEndpointAddress:
    Type: String
    
  DBMasterUsername:
    Type: String
    
  DBMasterUserPassword:
    Type: String
    
  DBName:
    Type: String
    
  DBTableName:
    Type: String
    
  FunctionSecurityGroup:
    Type: String
    
  FunctionSubnet:
    Type: String
    
  Handler:
    Type: String
    
  LambdaLayer:
    Type: String
    
  #LayerS3Key:
  #  Type: String
    
  MySQLPort:
    Type: Number
    
  Prefix:
    Type: String
    
  #PrivateSubnet:
  #  Type: String
    
  Runtime:
    Type: String
    
  Timeout:
    Type: Number


Resources:
  SQLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      #Name: !Ref Prefix
      Name: !Sub "${Prefix}-customresource-03"
      Type: String
      Value: !Sub |
        CREATE USER ${DBIamUsername} IDENTIFIED WITH AWSAuthenticationPlugin AS 'RDS'; 
        GRANT SELECT ON *.* TO 'iamuser'@'%';
        USE ${DBName};
        CREATE TABLE ${DBTableName} (id INT UNSIGNED AUTO_INCREMENT, name VARCHAR(30), PRIMARY KEY(id));
        INSERT INTO planet (name) VALUES ("Mercury");
        INSERT INTO planet (name) VALUES ("Venus");
        INSERT INTO planet (name) VALUES ("Earth");
        INSERT INTO planet (name) VALUES ("Mars");
        INSERT INTO planet (name) VALUES ("Jupiter");
        INSERT INTO planet (name) VALUES ("Saturn");
        INSERT INTO planet (name) VALUES ("Uranus");
        INSERT INTO planet (name) VALUES ("Neptune");
        
  CustomResource:
    Type: Custom::CustomResource
    Properties:
      #ServiceToken: !Ref FunctionArn
      ServiceToken: !GetAtt Function.Arn
      
  #LambdaLayer:
  #  Type: AWS::Lambda::LayerVersion
  #  Properties:
  #    CompatibleRuntimes:
  #      - !Ref Runtime
  #    Content:
  #      S3Bucket: !Ref CodeS3Bucket
  #      S3Key: !Ref LayerS3Key
  #    Description: !Ref Prefix
  #    LayerName: !Ref Prefix

  Function:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref Architecture
      Environment:
        Variables:
          #DB_NAME: !Ref DBName
          #DB_PROXY_ENDPOINT_ADDRESS: !Ref DBProxyEndpointAddress
          DB_ENDPOINT_ADDRESS: !Ref DBInstanceEndpointAddress
          DB_ENDPOINT_PORT: !Ref MySQLPort
          DB_PASSWORD: !Ref DBMasterUserPassword
          #DB_TABLENAME: !Ref DBTableName
          DB_USER: !Ref DBMasterUsername
          REGION: !Ref AWS::Region
          SQL_PARAMETER: !Ref SQLParameter
      Code:
        #S3Bucket: !Ref CodeS3Bucket
        #S3Key: !Ref CodeS3Key
        ZipFile: |
          import boto3
          import cfnresponse
          import mysql.connector
          import os
          
          db_endpoint_port = int(os.environ['DB_ENDPOINT_PORT'])
          db_endpoint_address = os.environ['DB_ENDPOINT_ADDRESS']
          db_password = os.environ['DB_PASSWORD']
          db_user = os.environ['DB_USER']
          region = os.environ['REGION']
          sql_parameter = os.environ['SQL_PARAMETER']
          
          CREATE = 'Create'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == CREATE:
                client = boto3.client('ssm', region_name=region)
                response = client.get_parameter(Name=sql_parameter)
                sql_statements = response['Parameter']['Value']
                #print(sql_statements)
                
                conn = mysql.connector.connect(
                  host=db_endpoint_address,
                  port=db_endpoint_port,
                  user=db_user,
                  password=db_password
                  )
                cur = conn.cursor()
                
                for sql in sql_statements.splitlines():
                  print(sql)
                  cur.execute(sql)
                  
                cur.close()
                conn.commit()
                
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      FunctionName: !Sub "${Prefix}-customresource-03"
      Handler: !Ref Handler
      Layers:
        - !Ref LambdaLayer
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      Timeout: !Ref Timeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref FunctionSecurityGroup
        SubnetIds:
          - !Ref FunctionSubnet

  FunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: GetSSMParameterPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SQLParameter}"
        
        
#Outputs:
#  FunctionArn:
#    Value: !GetAtt Function.Arn
#    
#  #FunctionName:
#  #  Value: !Ref Function
