AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Architecture:
    Type: String
    
  CachePrimaryEndpointAddress:
    Type: String
    
  CacheReaderEndPointAddress:
    Type: String
    
  FunctionSecurityGroup:
    Type: String

  Handler:
    Type: String
    
  LambdaLayer:
    Type: String
    
  LambdaSubnet:
    Type: String
    
  #LayerPackage:
  #  Type: String
    
  #LayerS3Key:
  #  Type: String
    
  Prefix:
    Type: String
    
  RedisPort:
    Type: Number
    
  #RequirementsParameter:
  #  Type: String
    
  Runtime:
    Type: String
    
  #Timeout:
  #  Type: Number
    
    
Resources:
  #LambdaLayer:
  #  Type: AWS::Lambda::LayerVersion
  #  DependsOn:
  #    - CustomResource
  #  Properties:
  #    CompatibleArchitectures:
  #      - !Ref Architecture
  #    CompatibleRuntimes:
  #      - !Ref Runtime
  #    Content:
  #      S3Bucket: !Ref CodeS3Bucket
  #      S3Key: !Sub "${Prefix}/${LayerPackage}"
  #    Description: !Ref Prefix
  #    LayerName: !Ref Prefix
  #    #LicenseInfo: MIT
  #    
  #CustomResource:
  #  Type: Custom::CustomResource
  #  Properties:
  #    ServiceToken: !GetAtt Function1.Arn
#
  #Function1:
  #  Type: AWS::Lambda::Function
  #  Properties:
  #    Architectures:
  #      - !Ref Architecture
  #    Environment:
  #      Variables:
  #        LAYER_PACKAGE: !Ref LayerPackage
  #        REGION: !Ref AWS::Region
  #        REQUIREMENTS_PARAMETER: !Ref RequirementsParameter
  #        S3_BUCKET: !Ref CodeS3Bucket
  #        S3_BUCKET_FOLDER: !Ref Prefix
  #    Code:
  #      ZipFile: |
  #        import boto3
  #        import cfnresponse
  #        import os
  #        import pip
  #        import shutil
  #        import subprocess
  #        
  #        layer_package = os.environ['LAYER_PACKAGE']
  #        region = os.environ['REGION']
  #        requirements_parameter = os.environ['REQUIREMENTS_PARAMETER']
  #        s3_bucket = os.environ['S3_BUCKET']
  #        s3_bucket_folder = os.environ['S3_BUCKET_FOLDER']
  #        
  #        CREATE = 'Create'
  #        response_data = {}
  #        
  #        work_dir = '/tmp'
  #        requirements_file = 'requirements.txt'
  #        package_dir = 'python'
  #        
  #        requirements_path = os.path.join(work_dir, requirements_file)
  #        package_dir_path = os.path.join(work_dir, package_dir)
  #        layer_package_path = os.path.join(
  #          work_dir,
  #          #os.path.splitext(os.path.basename(layer_package))[0]
  #          layer_package
  #          )
  #        
  #        def lambda_handler(event, context):
  #          try:
  #            if event['RequestType'] == CREATE:
  #              ssm_client = boto3.client('ssm', region_name=region)
  #              ssm_response = ssm_client.get_parameter(Name=requirements_parameter)
  #              requirements = ssm_response['Parameter']['Value']
  #              #print(requirements)
  #              
  #              with open(requirements_path, 'w') as file_data:
  #                print(requirements, file=file_data)
  #              
  #              pip.main(['install', '-t', package_dir_path, '-r', requirements_path])
  #              shutil.make_archive(
  #                os.path.splitext(layer_package_path)[0],
  #                format='zip',
  #                root_dir=work_dir,
  #                base_dir=package_dir
  #                )
  #              
  #              s3_resource = boto3.resource('s3')
  #              bucket = s3_resource.Bucket(s3_bucket)
  #              
  #              bucket.upload_file(
  #                layer_package_path,
  #                '/'.join([s3_bucket_folder, layer_package])
  #                )
  #              
  #            cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
  #              
  #          except Exception as e:
  #            print(e)
  #            cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
  #    EphemeralStorage:
  #      Size: !Ref EphemeralStorageSize
  #    FunctionName: !Sub "${Prefix}-function1"
  #    Handler: !Ref Handler
  #    #Layers:
  #    #  - !Ref LambdaLayer
  #    Runtime: !Ref Runtime
  #    Role: !GetAtt FunctionRole1.Arn
  #    Timeout: !Ref Timeout
  #    #VpcConfig:
  #    #  SecurityGroupIds:
  #    #    - !Ref FunctionSecurityGroup
  #    #  SubnetIds:
  #    #    - !Ref FunctionSubnet
      
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref Architecture
      Environment:
        Variables:
          PRIMARY_ENDPOINT_ADDRESS: !Ref CachePrimaryEndpointAddress
          READER_ENDPOINT_ADDRESS: !Ref CacheReaderEndPointAddress
          REDIS_PORT: !Ref RedisPort
      Code:
        ZipFile: |
          import json
          import os
          import redis
          
          primary_endpoint_address = os.environ['PRIMARY_ENDPOINT_ADDRESS']
          reader_endpoint_address = os.environ['READER_ENDPOINT_ADDRESS']
          redis_port = os.environ['REDIS_PORT']
          
          def lambda_handler(event, context):
            primary_redis = redis.Redis(
              host=primary_endpoint_address,
              port=redis_port
              )
            primary_redis.set('hogehoge', 'fugafuga')
            #print(primary_redis.get('hogehoge'))
            
            reader_redis = redis.Redis(
              host=reader_endpoint_address,
              port=redis_port
              )
              
            return {
              'statusCode': 200,
              'body': json.dumps(
                {
                  'primary_redis': primary_redis.get('hogehoge').decode(),
                  'reader_redis': reader_redis.get('hogehoge').decode()
                },
                indent=2
                )
            }
      FunctionName: !Sub "${Prefix}-function"
      Handler: !Ref Handler
      Layers:
        - !Ref LambdaLayer
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      #Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref FunctionSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet
      
  #FunctionUrl1:
  #  Type: AWS::Lambda::Url
  #  Properties:
  #    AuthType: NONE
  #    TargetFunctionArn: !GetAtt Function1.Arn
  
  FunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt Function.Arn
      
  #FunctionUrlPermission1:
  #  Type: AWS::Lambda::Permission
  #  Properties:
  #    Action: lambda:InvokeFunctionUrl
  #    FunctionName: !GetAtt Function1.Arn
  #    FunctionUrlAuthType: NONE
  #    Principal: "*"
  
  FunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !GetAtt Function.Arn
      FunctionUrlAuthType: NONE
      Principal: "*"
  
  #FunctionRole1:
  #  Type: AWS::IAM::Role
  #  Properties:
  #    AssumeRolePolicyDocument:
  #      Version: 2012-10-17
  #      Statement:
  #        - Effect: Allow
  #          Action: sts:AssumeRole
  #          Principal:
  #            Service:
  #              - lambda.amazonaws.com
  #    ManagedPolicyArns:
  #      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #    Policies:
  #      - PolicyName: CreateLambdaLayerPackagePolicy
  #        PolicyDocument:
  #          Version: 2012-10-17
  #          Statement:
  #            - Effect: Allow
  #              Action:
  #                - ssm:GetParameter
  #              Resource:
  #                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RequirementsParameter}"
  #            - Effect: Allow
  #              Action:
  #                - s3:PutObject
  #              Resource:
  #                - !Sub "arn:aws:s3:::${CodeS3Bucket}/*"

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        #- arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole