AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Architecture:
    Type: String

  Handler:
    Type: String

  Password:
    Type: String

  Prefix:
    Type: String

  Runtime:
    Type: String

  TopicName:
    Type: String
    
    
Resources:
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref Architecture
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          PASSWORD: !Ref Password
          REGION: !Ref AWS::Region
          TOPIC_NAME: !Ref TopicName
      Code:
        ZipFile: |
          import base64
          import json
          import os
          
          ACCOUNT_ID = os.environ['ACCOUNT_ID']
          PASSWORD = os.environ['PASSWORD']
          REGION = os.environ['REGION']
          TOPIC_NAME = os.environ['TOPIC_NAME']
          
          ALLOW = 'Allow'
          DENY = 'Deny'
        
          def lambda_handler(event, context):
            uname = event['protocolData']['mqtt']['username']
            print(uname)
            pwd = event['protocolData']['mqtt']['password']
            print(pwd)
            passwd = base64.b64decode(pwd).decode('utf-8')
            print(passwd)
            
            if passwd == PASSWORD:
              return generate_auth_response(passwd, ALLOW, True)
            else:
              return generate_auth_response(passwd, DENY, False)

          def generate_auth_response(token, effect, boolean):
            auth_response = {
              'isAuthenticated': boolean,
              'principalId': 'TEST123',
              'disconnectAfterInSeconds': 3600,
              'refreshAfterInSeconds': 300,
              'policyDocuments': [
                json.dumps(
                  {
                    'Version': '2012-10-17',
                    'Statement': [
                      {
                        'Action': 'iot:Connect',
                        'Effect': effect,
                        'Resource': '*'
                      }
                    ]
                  }
                )
              ]
            }
            print(json.dumps(auth_response))
            return auth_response
      FunctionName: !Sub "${Prefix}-function"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn

  FunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

                  
Outputs:
  FunctionArn:
    Value: !GetAtt Function.Arn
    
  FunctionName:
    Value: !Ref Function
