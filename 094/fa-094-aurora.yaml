AWSTemplateFormatVersion: 2010-09-09

Parameters:
  AvailabilityZone1:
    Type: String
    
  AvailabilityZone2:
    Type: String
    
  DBEngine:
    Type: String
  
  DBEngineVersion:
    Type: String
    
  DBInstanceClass:
    Type: String
    
  DBName:
    Type: String
    
  DBPassword:
    Type: String
    
  DBSecurityGroup:
    Type: String
    
  DBSubnet1:
    Type: String
    
  DBSubnet2:
    Type: String
    
  DBTableName:
    Type: String
    
  DBUser:
    Type: String
  
  FunctionArchitecture:
    Type: String
    
  FunctionEphemeralStorageSize:
    Type: Number
    
  FunctionHandler:
    Type: String
    
  FunctionLayerBucket:
    Type: String
    
  FunctionLayerBucketFolder:
    Type: String
    
  FunctionLayerPackage:
    Type: String
    
  FunctionRuntime:
    Type: String
    
  FunctionSecurityGroup:
    Type: String
    
  FunctionSubnet:
    Type: String
    
  FunctionTimeout:
    Type: Number
    
  MySQLPort:
    Type: Number
    
  Prefix:
    Type: String
    
    
Resources:
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: !Ref DBName
      DBClusterIdentifier: !Sub "${Prefix}-dbcluster"
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      MasterUsername: !Ref DBUser # cannot use "-".
      MasterUserPassword: !Ref DBPassword # cannot use "/@'"
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
        
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub "${Prefix}-dbsubnetgroup" # must be lowercase alphanumeric characters or hyphens.
      DBSubnetGroupDescription: Test DBSubnetGroup for Aurora.
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
      
  DBInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBInstanceIdentifier: !Sub "${Prefix}-dbinstance1"
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref DBEngine
      AvailabilityZone: !Sub "${AWS::Region}${AvailabilityZone1}"
      PubliclyAccessible: false
      
  DBInstance2:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBInstanceIdentifier: !Sub "${Prefix}-dbinstance2"
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref DBEngine
      AvailabilityZone: !Sub "${AWS::Region}${AvailabilityZone2}"
      PubliclyAccessible: false


  RequirementsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Prefix}-RequirementsParameter"
      Type: String
      Value: |
        mysql-connector-python
        
  LambdaLayderCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt LambdaLayerFunction.Arn
  
  LambdaLayerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref FunctionArchitecture
      Environment:
        Variables:
          LAYER_PACKAGE: !Ref FunctionLayerPackage
          REGION: !Ref AWS::Region
          REQUIREMENTS_PARAMETER: !Ref RequirementsParameter
          S3_BUCKET: !Ref FunctionLayerBucket
          S3_BUCKET_FOLDER: !Ref FunctionLayerBucketFolder
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          import pip
          import shutil
          import subprocess
          
          layer_package = os.environ['LAYER_PACKAGE']
          region = os.environ['REGION']
          requirements_parameter = os.environ['REQUIREMENTS_PARAMETER']
          s3_bucket = os.environ['S3_BUCKET']
          s3_bucket_folder = os.environ['S3_BUCKET_FOLDER']
          
          CREATE = 'Create'
          response_data = {}
          
          work_dir = '/tmp'
          requirements_file = 'requirements.txt'
          package_dir = 'python'
          
          requirements_path = os.path.join(work_dir, requirements_file)
          package_dir_path = os.path.join(work_dir, package_dir)
          layer_package_path = os.path.join(
            work_dir,
            #os.path.splitext(os.path.basename(layer_package))[0]
            layer_package
            )
          
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == CREATE:
                ssm_client = boto3.client('ssm', region_name=region)
                ssm_response = ssm_client.get_parameter(Name=requirements_parameter)
                requirements = ssm_response['Parameter']['Value']
                #print(requirements)
                
                with open(requirements_path, 'w') as file_data:
                  print(requirements, file=file_data)
                
                pip.main(['install', '-t', package_dir_path, '-r', requirements_path])
                shutil.make_archive(
                  os.path.splitext(layer_package_path)[0],
                  format='zip',
                  root_dir=work_dir,
                  base_dir=package_dir
                  )
                
                s3_resource = boto3.resource('s3')
                bucket = s3_resource.Bucket(s3_bucket)
                
                bucket.upload_file(
                  layer_package_path,
                  '/'.join([s3_bucket_folder, layer_package])
                  )
                
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      EphemeralStorage:
        Size: !Ref FunctionEphemeralStorageSize
      FunctionName: !Sub "${Prefix}-LambdaLayerFunction"
      Handler: !Ref FunctionHandler
      Runtime: !Ref FunctionRuntime
      Role: !GetAtt LambdaLayerFunctionRole.Arn
      Timeout: !Ref FunctionTimeout
      
  LambdaLayerFunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CreateLambdaLayerPackagePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RequirementsParameter}"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${FunctionLayerBucket}/*"

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    DependsOn:
      - LambdaLayderCustomResource
    Properties:
      CompatibleArchitectures:
        - !Ref FunctionArchitecture
      CompatibleRuntimes:
        - !Ref FunctionRuntime
      Content:
        S3Bucket: !Ref FunctionLayerBucket
        S3Key: !Sub "${FunctionLayerBucketFolder}/${FunctionLayerPackage}"
      Description: !Ref Prefix
      LayerName: !Ref Prefix
      
      
  SQLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Prefix}-SQLParameter"
      Type: String
      Value: !Sub |
        USE ${DBName};
        CREATE TABLE ${DBTableName} (dt datetime);
        
  InitDBCustomResource:
    Type: Custom::CustomResource
    DependsOn:
      - DBCluster
      - DBSubnetGroup
      - DBInstance1
      - DBInstance2
      - LambdaLayer
    Properties:
      ServiceToken: !GetAtt InitDBFunction.Arn
      
  InitDBFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - DBCluster
      - DBSubnetGroup
      - DBInstance1
      - DBInstance2
      - LambdaLayer
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import mysql.connector
          import os
          
          db_endpoint_address = os.environ['DB_ENDPOINT_ADDRESS']
          db_endpoint_port = int(os.environ['DB_ENDPOINT_PORT'])
          db_password = os.environ['DB_PASSWORD']
          db_user = os.environ['DB_USER']
          region = os.environ['REGION']
          sql_parameter = os.environ['SQL_PARAMETER']

          CREATE = 'Create'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == CREATE:
                client = boto3.client('ssm', region_name=region)
                response = client.get_parameter(Name=sql_parameter)
                sql_statements = response['Parameter']['Value']
                
                conn = mysql.connector.connect(
                  host=db_endpoint_address,
                  port=db_endpoint_port,
                  user=db_user,
                  password=db_password
                  )
                cur = conn.cursor()
                
                for sql in sql_statements.splitlines():
                  print(sql)
                  cur.execute(sql)
                  
                cur.close()
                conn.commit()
                
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      Environment:
        Variables:
          DB_ENDPOINT_ADDRESS: !GetAtt DBCluster.Endpoint.Address
          DB_ENDPOINT_PORT: !Ref MySQLPort
          DB_PASSWORD: !Ref DBPassword
          DB_USER: !Ref DBUser
          REGION: !Ref AWS::Region
          SQL_PARAMETER: !Ref SQLParameter
      FunctionName: !Sub "${Prefix}-InitDBFunction"
      Handler: !Ref FunctionHandler
      Layers:
        - !Ref LambdaLayer
      Runtime: !Ref FunctionRuntime
      Role: !GetAtt InitDBFunctionRole.Arn
      Timeout: !Ref FunctionTimeout
      VpcConfig:
        SecurityGroupIds:
          - !Ref FunctionSecurityGroup
        SubnetIds:
          - !Ref FunctionSubnet

  InitDBFunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: GetSSMParameterPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SQLParameter}"


Outputs:
  DBWriteEndpointAddress:
    Value: !GetAtt DBCluster.Endpoint.Address
    
  DBReadEndpointAddress:
    Value: !GetAtt DBCluster.ReadEndpoint.Address
