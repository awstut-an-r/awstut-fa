AWSTemplateFormatVersion: 2010-09-09

Parameters:
  AppSecurityGroup:
    Type: String

  AppSubnet1:
    Type: String
    
  AppSubnet2:
    Type: String
    
  DesiredCapacity:
    Type: Number
    
  FunctionHandler:
    Type: String
    
  FunctionRuntime:
    Type: String
    
  InstanceImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    
  InstanceProfileArn:
    Type: String
  
  InstanceTagKey:
    Type: String
    
  InstanceTagValueApp:
    Type: String
    
  InstanceType:
    Type: String
    
  MaxSize:
    Type: Number
    
  MinSize:
    Type: Number
    
  NLBLoadBalancerName:
    Type: String

  NLBTargetGroup:
    Type: String

  Prefix:
    Type: String
    
  UWSGIPort:
    Type: Number
    

Resources:
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !Ref InstanceProfileArn
        ImageId: !Ref InstanceImageId
        InstanceType: !Ref InstanceType
        SecurityGroupIds: 
          - !Ref AppSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: !Ref InstanceTagKey
                Value: !Ref InstanceTagValueApp
      LaunchTemplateName: !Sub "${Prefix}-LaunchTemplate-App"

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${Prefix}-AutoScalingGroup-App"
      DesiredCapacity: !Ref DesiredCapacity
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      VPCZoneIdentifier:
        - !Ref AppSubnet1
        - !Ref AppSubnet2
      TargetGroupARNs:
        - !Ref NLBTargetGroup
  
  AppSecurityGroupCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt AppSecurityGroupFunction.Arn
      
  AppSecurityGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          
          nlb_loadbalancer_name = os.environ['NLB_LOADBALANCER_NAME']
          security_group_id = os.environ['SECURITY_GROUP']
          uwsgi_port = int(os.environ['UWSGI_PORT'])
          
          filter_value = '*{nlb}*'.format(nlb=nlb_loadbalancer_name)
          
          client = boto3.client('ec2')
           
          CREATE = 'Create'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == CREATE:
                describe_network_interfaces_response = client.describe_network_interfaces(
                  Filters=[
                    {
                      'Name':'description',
                      'Values':[
                        filter_value
                      ]
                    }
                  ]
                )
                
                for interface in describe_network_interfaces_response['NetworkInterfaces']:
                  private_address = interface['PrivateIpAddress']
                  authorize_security_group_ingress_response = client.authorize_security_group_ingress(
                    GroupId=security_group_id,
                    IpPermissions=[
                      {
                        'FromPort': uwsgi_port,
                        'IpProtocol': 'tcp',
                        'IpRanges': [
                          {
                            'CidrIp': '{address}/32'.format(address=private_address)
                          }
                        ],
                        'ToPort': uwsgi_port
                      }
                    ]
                  )
                  print(authorize_security_group_ingress_response)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      Environment:
        Variables:
          NLB_LOADBALANCER_NAME: !Ref NLBLoadBalancerName
          SECURITY_GROUP: !Ref AppSecurityGroup
          UWSGI_PORT: !Ref UWSGIPort
      FunctionName: !Sub "${Prefix}-AppSecurityGroupFunction"
      Handler: !Ref FunctionHandler
      Runtime: !Ref FunctionRuntime
      Role: !GetAtt AppSecurityGroupFunctionRole.Arn

  AppSecurityGroupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${Prefix}-AuthorizeSecurityGroupPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:AuthorizeSecurityGroupIngress
                Resource: "*"
