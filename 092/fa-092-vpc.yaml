AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AvailabilityZone1:
    Type: String
  
  AvailabilityZone2:
    Type: String
    
  CidrIp1:
    Type: String
    
  CidrIp2:
    Type: String
    
  CidrIp3:
    Type: String
    
  CidrIp4:
    Type: String
    
  #HTTPPort:
  #  Type: Number
    
  #HTTPSPort:
  #  Type: Number
    
  Prefix:
    Type: String
    
  #UWSGIPort:
  #  Type: Number
    
  VPCCidrBlock:
    Type: String


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
  
  IGW:
    Type: AWS::EC2::InternetGateway
  
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
      
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
          
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      
      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref CidrIp1
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}${AvailabilityZone1}"
      
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref CidrIp2
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}${AvailabilityZone2}"
      
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref CidrIp3
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}${AvailabilityZone1}"
      
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref CidrIp4
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}${AvailabilityZone2}"
      
      
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      
  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
      
      
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      
  RouteToNATGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
      
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
      
      
  #ALBSecurityGroup:
  #  Type: AWS::EC2::SecurityGroup
  #  Properties:
  #    GroupName: !Sub "${Prefix}-ALBSecurityGroup"
  #    GroupDescription: Allow HTTP Only.
  #    VpcId: !Ref VPC
  #    SecurityGroupIngress:
  #      - IpProtocol: tcp
  #        FromPort: !Ref HTTPPort
  #        ToPort: !Ref HTTPPort
  #        CidrIp: 0.0.0.0/0
          
  #InstanceSecurityGroup1:
  #  Type: AWS::EC2::SecurityGroup
  #  Properties:
  #    GroupName: !Sub "${Prefix}-InstanceSecurityGroup"
  #    GroupDescription: Allow HTTP.
  #    VpcId: !Ref VPC
  #    SecurityGroupIngress:
  #      - IpProtocol: tcp
  #        FromPort: !Ref HTTPPort
  #        ToPort: !Ref HTTPPort
  #        CidrIp: 0.0.0.0/0
  #        #SourceSecurityGroupId: !Ref ALBSecurityGroup
  #      - IpProtocol: icmp
  #        FromPort: -1
  #        ToPort: -1
  #        CidrIp: 0.0.0.0/0
          
  #InstanceSecurityGroup2:
  #  Type: AWS::EC2::SecurityGroup
  #  Properties:
  #    GroupName: !Sub "${Prefix}-InstanceSecurityGroup2"
  #    GroupDescription: Allow HTTP from InstanceSecurityGroup1.
  #    VpcId: !Ref VPC
  #    SecurityGroupIngress:
  #      - IpProtocol: tcp
  #        #FromPort: 0
  #        #ToPort: 65535
  #        FromPort: !Ref UWSGIPort
  #        ToPort: !Ref UWSGIPort
  #        CidrIp: 0.0.0.0/0
  #        #SourceSecurityGroupId: !Ref InstanceSecurityGroup1
  #      - IpProtocol: icmp
  #        FromPort: -1
  #        ToPort: -1
  #        SourceSecurityGroupId: !Ref InstanceSecurityGroup1
          
  #EndpointSecurityGroup:
  #  Type: AWS::EC2::SecurityGroup
  #  Properties:
  #    GroupName: !Sub "${Prefix}-EndpointSecurityGroup"
  #    GroupDescription: Allow HTTPS from InstanceSecurityGroup.
  #    VpcId: !Ref VPC
  #    SecurityGroupIngress:
  #      - IpProtocol: tcp
  #        FromPort: !Ref HTTPSPort
  #        ToPort: !Ref HTTPSPort
  #        SourceSecurityGroupId: !Ref InstanceSecurityGroup
          
          
Outputs:
  VPC:
    Value: !Ref VPC
      
  PublicSubnet1:
    Value: !Ref PublicSubnet1
      
  PublicSubnet2:
    Value: !Ref PublicSubnet2
      
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
      
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
      
  #PrivateRouteTable:
  #  Value: !Ref PrivateRouteTable
      
  #ALBSecurityGroup:
  #  Value: !Ref ALBSecurityGroup
  
  #InstanceSecurityGroup1:
  #  Value: !Ref InstanceSecurityGroup1
  #  
  #InstanceSecurityGroup2:
  #  Value: !Ref InstanceSecurityGroup2
  
  #EndpointSecurityGroup:
  #  Value: !Ref EndpointSecurityGroup