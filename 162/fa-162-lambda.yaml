AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Architecture:
    Type: String

  Handler:
    Type: String
    
  Prefix:
    Type: String
    
  Runtime:
    Type: String

    
Resources:
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref Architecture
      Code:
        ZipFile: |
          import boto3
          
          def lambda_handler(event, context):
            sns = boto3.client('sns')
            message_text = "Device {0} reports a temperature of {1}, which exceeds the limit of {2}.".format(
            
              str(event['device_id']),
              str(event['reported_temperature']),
              str(event['max_temperature'])
            )
            
            response = sns.publish(
              TopicArn = event['notify_topic_arn'],
              Message = message_text
            )

            return response
      FunctionName: !Sub "${Prefix}-function"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
  
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*"
                  
                  
Outputs:
  FunctionArn:
    Value: !GetAtt Function.Arn
